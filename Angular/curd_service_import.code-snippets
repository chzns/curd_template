{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"curd.service_snippet": {
		"prefix": "curd.service.ts",
		"body": [
			"import { Injectable } from '@angular/core'",
			"import { HttpClient } from '@angular/common/http'",
			"import { Observable } from 'rxjs'",
			"export interface TableName {",
			"  id: number",
			"  name: string",
			"  price: number",
			"}",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class TableNameService {",
			"  private apiUrl = 'http://localhost:55961/api/TableName' // Base URL for your API",
			"  constructor (private http: HttpClient) {}",
			"  getTableName (): Observable<TableName[]> {",
			"    return this.http.get<TableName[]>(`${this.apiUrl}/GetTableName`)",
			"  }",
			"  // Add or Edit TableName based on the presence of ID",
			"  saveTableName (TableName: TableName): Observable<any> {",
			"    if (TableName.id === 0) {",
			"      return this.http.post(`${this.apiUrl}/AddTableName`, TableName)",
			"    } else {",
			"      return this.http.put(",
			"        `${this.apiUrl}/EditTableName/${TableName.id}`,",
			"        TableName",
			"      )",
			"    }",
			"  }",
			"  // // Add a TableName to the list (will not persist to the server)",
			"  addTableName (TableName: TableName): void {",
			"    // This would ideally be handled with an API call",
			"    this.http.post(`${this.apiUrl}/AddTableName`, TableName)",
			"  }",
			"  // Update a TableName (will not persist to the server)",
			"  updateTableName (TableName: TableName): void {",
			"    // This would ideally be handled with an API call",
			"    this.http.put(`${this.apiUrl}/EditTableName/${TableName.id}`, TableName)",
			"  }",
			"  // Delete a TableName (will not persist to the server)",
			"  deleteTableName (id: number): Observable<any> {",
			"    // This would ideally be handled with an API call",
			"    return this.http.delete(`${this.apiUrl}/DeleteTableName/${.id}`)",
			"  }",
			"}",
		],
		"description": "Gennerate Service.ts"
	},
	"curd.app.module_snippet": {
		"prefix": "curd.app.module.ts",
		"body": [
			"import { NgModule } from '@angular/core'",
			"import { BrowserModule } from '@angular/platform-browser'",
			"import { AppRoutingModule } from './app-routing.module'",
			"import { AppComponent } from './app.component'",
			"import { HttpClientModule } from '@angular/common/http'",
			"import { FormsModule } from '@angular/forms' // 导入 FormsModule",
			"@NgModule({",
			"  declarations: [AppComponent],",
			"  imports: [BrowserModule, FormsModule, AppRoutingModule, HttpClientModule],",
			"  providers: [],",
			"  bootstrap: [AppComponent]",
			"})",
			"export class AppModule {}",
		],
		"description": "Gennerate Service.ts"
	},
	"curd.app.html": {
		"prefix": "curd.app.html",
		"body": [
			"<main class='main'><h2>TableName Form</h2>",
			"<form (ngSubmit)='saveTableName(TableName)'>",
			"  <label for='name'>Name:</label>",
			"  <input id='name' [(ngModel)]='TableName.name' name='name' required>",
			"<!-- <span *ngIf='TableName.==='''>Please enter a  name.</span> -->",
			"  <button type='submit'>Save TableName</button>",
			"</form>",
			"<h2>TableName List</h2>",
			"<ul>",
			"  <li *ngFor='let model of TableNames '>",
			"   id{{model.id}} ",
			"<div class='button-container'>",
			"    <button (click)='deleteTableName(model.id)'>Delete</button>",
			"    <button (click)='editTableName(model)'>Edit</button> ",
			"</div>",
			"  </li>",
			"</ul>",
			"</main>",
			"<router-outlet />",
		],
		"description": "Gennerate curd html"
	},
	"curd.readme.md": {
		"prefix": "curd.readme.md",
		"body": [
			"-- UI CMD",
			"1.install Angular CLI ",
			"npm install -g @angular/cli",
			"2.create new project",
			"ng new crud-demo --standalone=false",
			"cd crud-demo",
			"3.create service",
			"ng generate service product",
			"4.create component",
			"ng generate component product-list",
			"ng generate component produc  t-form",
			"--DB CMD",
			"{",
			"  'ConnectionStrings': {",
			"    'demo': 'Server=.;Database=Test;UID =sa;PWD=P@ssw0rd;'",
			"  }",
			"}",
			"Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 6.0.0",
			"Install-Package Microsoft.EntityFrameworkCore.Tools -Version 6.0.0",
			"Scaffold-DbContext 'Server=.;Database=Test;User Id=sa;Password=P@ssw0rd;' Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Context DemoContext -ContextDir Context -Force",
			"Scaffold-DbContext 'Server=(localdb)\\mssqllocaldb;Database=Test;User Id=sa;Password=P@ssw0rd;' Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Context DemoContext -ContextDir Context -Force",
		],
		"description": "Generate readme.md"
	},
	"curd.component.snippet": {
		"prefix": "curd.component",
		"body": [
			"import { Component, Input, OnInit } from '@angular/core'",
			"import { TableNameService } from './TableName.service'",
			"import { TableName } from './TableName.service' // Ensure this is correctly imported",
			"@Component({",
			"  selector: 'app-root',",
			"  templateUrl: './app.component.html',",
			"  styleUrls: ['./app.component.css'] // Corrected styleUrls",
			"})",
			"export class AppComponent implements OnInit {",
			"  title = 'crud-demo'",
			"  TableNames: TableName[] = [] // Initialize as an empty array",
			"  @Input() TableName: TableName = { id: 0, name: '' }",
			"  constructor (public TableNameService: TableNameService) {}",
			"  ngOnInit (): void {",
			"    this.loadTableNames()",
			"  }",
			"  public async loadTableNames (): Promise<void> {",
			"    try {",
			"      const data = await this.TableNameService.getTableName().toPromise()",
			"      this.TableNames = data || [] // Ensure TableName is always an array",
			"    } catch (error) {",
			"      console.error('Error loading TableNames:', error)",
			"    }",
			"  }",
			"  public async deleteTableName (id: number): Promise<void> {",
			"    try {",
			"      this.TableNameService.deleteTableName(id).subscribe(",
			"        response => {",
			"          this.loadTableNames() ",
			"        },",
			"        error => {",
			"          console.error('Error saving TableName:', error)",
			"        }",
			"      )",
			"    } catch (error) {",
			"      console.error('Error deleting TableName:', error)",
			"    }",
			"  }",
			"  public async saveTableName (TableName: TableName): Promise<void> {",
			"    this.TableNameService.saveTableName(TableName).subscribe(",
			"      response => {",
			"        this.loadTableNames() ",
			"        this.resetTableName()",
			"      },",
			"      error => {",
			"        console.error('Error saving TableName:', error)",
			"      }",
			"    )",
			"  }",
			"public async editTableName (TableName: TableName): Promise<void> {",
			"    this.TableName = { ...TableName }",
			"  }",
			"  resetTableName () {",
			"    this.TableName = { id: 0, name: '', price: 0 }",
			"  }",
			"}",
		],
		"description": "Generate curd component.ts"
	},
	"curd.style.snippet": {
		"prefix": "curd.style.snippet",
		"body": [
			".main {",
			"  max-width: 800px;",
			"  margin: 0 auto;",
			"  padding: 20px;",
			"  background-color: #f9f9f9;",
			"  border-radius: 8px;",
			"  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);",
			"}",
			"/* 标题样式 */",
			".main h2 {",
			"  font-family: 'Arial', sans-serif;",
			"  color: #333;",
			"  text-align: center;",
			"  margin-bottom: 20px;",
			"}",
			"/* 表单样式 */",
			"form {",
			"  display: flex;",
			"  flex-direction: column;",
			"  gap: 15px;",
			"}",
			"label {",
			"  font-weight: bold;",
			"  color: #555;",
			"}",
			"input[type='text'],",
			"input[type='number'] {",
			"  padding: 10px;",
			"  border: 1px solid #ddd;",
			"  border-radius: 4px;",
			"  font-size: 16px;",
			"}",
			"input[type='text']:focus,",
			"input[type='number']:focus {",
			"  outline: none;",
			"  border-color: #007bff;",
			"  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);",
			"}",
			"/* 按钮样式 */",
			"button[type='submit'] {",
			"  padding: 10px 20px;",
			"  font-size: 16px;",
			"  color: #fff;",
			"  background-color: #007bff;",
			"  border: none;",
			"  border-radius: 4px;",
			"  cursor: pointer;",
			"  transition: background-color 0.3s;",
			"}",
			"button[type='submit']:hover {",
			"  background-color: #0056b3;",
			"}",
			"/* 列表样式 */",
			"ul {",
			"  list-style-type: none;",
			"  padding: 0;",
			"  margin-top: 30px;",
			"}",
			"li {",
			"  display: flex;",
			"  justify-content: space-between;",
			"  align-items: center;",
			"  background-color: #fff;",
			"  margin-bottom: 10px;",
			"  padding: 10px;",
			"  border-radius: 4px;",
			"  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);",
			"}",
			"li:nth-child(odd) {",
			"  background-color: #f4f4f4;",
			"}",
			"/* 列表中的按钮样式 */",
			"button {",
			"  padding: 5px 10px;",
			"  font-size: 14px;",
			"  color: #fff;",
			"  background-color: #cc0808;",
			"  border: none;",
			"  border-radius: 4px;",
			"  cursor: pointer;",
			"  transition: background-color 0.3s;",
			"}",
			"button:hover {",
			"  background-color: #cc0808;",
			"}",
			"button:nth-of-type(2) {",
			"  background-color: #1b36e8;",
			"}",
			"button:nth-of-type(2):hover {",
			"  background-color: #1b36e8;",
			"}",
			".button-container {",
			"  display: flex;",
			"}",
		],
		"description": "描述"
	}
}